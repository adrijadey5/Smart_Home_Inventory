/**
 * @fileoverview Firestore Security Rules for the smart home inventory system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for inventory items,
 * ensuring that only authenticated users can manage their own inventory data.
 * Item templates are globally readable.
 *
 * Data Structure:
 * - /item_templates/{itemTemplateId}: Stores predefined item templates, accessible to all users.
 * - /users/{userId}/inventory_items/{inventoryItemId}: Stores inventory items owned by a specific user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete inventory items under their own user ID.
 * - Item templates are publicly readable but not writable.
 * - Listing inventory items is restricted to the owner of the items.
 *
 * Denormalization for Authorization:
 *  - The design uses path-based ownership for `InventoryItem` documents, eliminating
 *    the need for extra `get()` calls to determine ownership. The `userId` is
 *    implicitly available from the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read item templates, but prohibits creation, updates, and deletion.
     * @path /item_templates/{itemTemplateId}
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Allows public read access to item templates while restricting write access.
     */
    match /item_templates/{itemTemplateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to inventory items owned by a specific user.
     * @path /users/{userId}/inventory_items/{inventoryItemId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get, list, update, delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @principle Enforces document ownership: only the user who owns the inventory items can read and write to them.
     */
    match /users/{userId}/inventory_items/{inventoryItemId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}