/**
 * @fileoverview Firestore Security Rules for Smart Inventory System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for inventory items while allowing public read access to item templates.
 * All write operations are protected by authorization checks based on the authenticated user's ID.
 *
 * Data Structure:
 * - /item_templates/{itemTemplateId}: Public collection of item templates, readable by anyone.
 * - /users/{userId}/inventory_items/{inventoryItemId}: User-owned collection of inventory items.
 *
 * Key Security Decisions:
 * - Users can only manage their own inventory items.
 * - Item templates are publicly readable but not writable by users.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 *  - Inventory items are stored under a user's path (/users/{userId}/inventory_items/{inventoryItemId}) to avoid `get()` calls for authorization.
 *
 * Structural Segregation:
 * - Item templates are stored in a separate, public collection to avoid mixing public and private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Item templates are available to all users.
     * @path /item_templates/{itemTemplateId}
     * @allow (get, list) Anyone can read item templates.
     * @deny (create, update, delete) No one can modify item templates through the client.
     * @principle Allows public read access to item templates.
     */
    match /item_templates/{itemTemplateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Inventory items are owned by the user.
     * @path /users/{userId}/inventory_items/{inventoryItemId}
     * @allow (create) User 'user123' can create a new item with itemTemplateId and quantity if authenticated.
     * @allow (get, list, update, delete) User 'user123' can read, update and delete their own inventory items if authenticated.
     * @deny (create, update, delete) User 'user456' cannot create, update, or delete items for user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/inventory_items/{inventoryItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.itemTemplateId is string && request.resource.data.quantity is number;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}